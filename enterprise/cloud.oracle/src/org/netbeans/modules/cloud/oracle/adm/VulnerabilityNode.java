/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.cloud.oracle.adm;

import com.oracle.bmc.adm.ApplicationDependencyManagementClient;
import com.oracle.bmc.adm.model.ApplicationDependencyVulnerabilitySummary;
import com.oracle.bmc.adm.model.Vulnerability;
import com.oracle.bmc.adm.requests.ListApplicationDependencyVulnerabilitiesRequest;
import com.oracle.bmc.adm.responses.ListApplicationDependencyVulnerabilitiesResponse;
import java.util.HashSet;
import java.util.stream.Collectors;
import org.netbeans.modules.cloud.common.explorer.ChildrenProvider;
import org.netbeans.modules.cloud.common.explorer.NodeProvider;
import org.netbeans.modules.cloud.oracle.OCIManager;
import org.netbeans.modules.cloud.oracle.OCINode;
import org.netbeans.modules.cloud.oracle.items.OCID;
import org.netbeans.modules.cloud.oracle.items.OCIItem;
import org.openide.nodes.Children;

/**
 *
 * @author Petr Pisl
 */
public class VulnerabilityNode extends OCINode {
    
    private static final String ICON = "org/netbeans/modules/cloud/oracle/resources/bug.png"; // NOI18N

    public VulnerabilityNode(OCIItem item) {
        super(item);
        setIconBaseWithExtension(ICON);
    }

    @NodeProvider.Registration(path = "Oracle/Vulnerability")
    public static NodeProvider<VulnerabilityItem> createNode() {
        return VulnerabilityNode::new;
    }
    
    @ChildrenProvider.Registration(parentPath = "Oracle/VulnerabilityAudit")
    public static ChildrenProvider<VulnerabilityAuditItem, VulnerabilityItem> listVulnerabilities() {
        return auditId -> {
            try ( ApplicationDependencyManagementClient client 
                    = new ApplicationDependencyManagementClient(OCIManager.getDefault().getConfigProvider())) {
                ListApplicationDependencyVulnerabilitiesRequest advRequest = ListApplicationDependencyVulnerabilitiesRequest.builder()
                        .vulnerabilityAuditId(auditId.getKey().getValue()).build();
                ListApplicationDependencyVulnerabilitiesResponse vulners = client.listApplicationDependencyVulnerabilities(advRequest);
                
                HashSet<Vulnerability> vulnerabilites = new HashSet();
                
                
                for (ApplicationDependencyVulnerabilitySummary item : vulners.getApplicationDependencyVulnerabilityCollection().getItems()) {
                    for (Vulnerability vulnerability: item.getVulnerabilities()) {
                        vulnerabilites.add(vulnerability);
                    }
                }
                return vulnerabilites.stream().map(v -> new VulnerabilityItem(OCID.of(v.getId(), "Oracle/Vulnerability"), v)).collect(Collectors.toList());
            }
        };
    }
    
    static String getDisplayName(Vulnerability item) {
        StringBuilder sb = new StringBuilder();
        sb.append(item.getId());
        sb.append("(Cvss V2: ").append(item.getCvssV2Score());
        sb.append(", Cvss V3: ").append(item.getCvssV3Score());
        sb.append(")");
        return sb.toString();
    }
} 

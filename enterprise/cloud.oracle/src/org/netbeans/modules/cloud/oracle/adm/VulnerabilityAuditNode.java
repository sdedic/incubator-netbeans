/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.cloud.oracle.adm;

import com.oracle.bmc.adm.ApplicationDependencyManagementClient;
import com.oracle.bmc.adm.model.KnowledgeBaseSummary;
import com.oracle.bmc.adm.model.VulnerabilityAuditSummary;
import com.oracle.bmc.adm.requests.ListKnowledgeBasesRequest;
import com.oracle.bmc.adm.requests.ListVulnerabilityAuditsRequest;
import com.oracle.bmc.adm.responses.ListKnowledgeBasesResponse;
import com.oracle.bmc.adm.responses.ListVulnerabilityAuditsResponse;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.stream.Collectors;
import org.netbeans.modules.cloud.common.explorer.ChildrenProvider;
import org.netbeans.modules.cloud.common.explorer.NodeProvider;
import org.netbeans.modules.cloud.oracle.OCIManager;
import org.netbeans.modules.cloud.oracle.OCINode;
import org.netbeans.modules.cloud.oracle.items.OCID;
import org.netbeans.modules.cloud.oracle.items.OCIItem;

/**
 *
 * @author Petr Pisl
 */
public class VulnerabilityAuditNode extends OCINode {
    
    private static final String ICON_BAD = "org/netbeans/modules/cloud/oracle/resources/audit_bad.png"; // NOI18N
    private static final String ICON_OK = "org/netbeans/modules/cloud/oracle/resources/audit_good.png"; // NOI18N
    
    public VulnerabilityAuditNode(VulnerabilityAuditItem audit) {
        super(audit);
        if (audit.getVulnerabilityAuditSummary().getIsSuccess()) {
            setIconBaseWithExtension(ICON_OK);
        } else {
            setIconBaseWithExtension(ICON_BAD);
        }
        setDisplayName(getDisplayName(audit.getVulnerabilityAuditSummary()));
    }
    
    @NodeProvider.Registration(path = "Oracle/VulnerabilityAudit")
    public static NodeProvider<VulnerabilityAuditItem> createNode() {
        return VulnerabilityAuditNode::new;
    }
    
    @ChildrenProvider.Registration(parentPath = "Oracle/KnowledgeBase")
    public static ChildrenProvider<KnowledgeBaseItem, VulnerabilityAuditItem> listVulnerabilityAudits() {
        return base -> {
            try ( ApplicationDependencyManagementClient client 
                    = new ApplicationDependencyManagementClient(OCIManager.getDefault().getConfigProvider())) {
                
                ListVulnerabilityAuditsRequest request = ListVulnerabilityAuditsRequest.builder()
                        .knowledgeBaseId(base.getKey().getValue()).limit(10).sortBy(ListVulnerabilityAuditsRequest.SortBy.TimeCreated).build();
                ListVulnerabilityAuditsResponse response = client.listVulnerabilityAudits(request);
                List<VulnerabilityAuditSummary> items = response.getVulnerabilityAuditCollection().getItems();
                return items.stream().map(item -> new VulnerabilityAuditItem(OCID.of(item.getId(), "Oracle/VulnerabilityAudit"), item)).collect(Collectors.toList());
            }
        };
    }
    
    protected static String getDisplayName(VulnerabilityAuditSummary item) {
        StringBuilder sb = new StringBuilder();
        
        
        SimpleDateFormat df = new SimpleDateFormat (" HH:mm:ss dd.MM.yy");
        sb.append(item.getDisplayName()).append(df.format(item.getTimeCreated()));
        if (item.getVulnerableArtifactsCount() > 0) {
            sb.append("(Cvss V2: ").append(item.getMaxObservedCvssV2Score());
            sb.append(", Cvss V3: ").append(item.getMaxObservedCvssV3Score());
            sb.append(")");
        }
        return sb.toString();
    }    
    
}
